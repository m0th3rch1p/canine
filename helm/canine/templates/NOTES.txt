1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "canine.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "canine.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "canine.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "canine.name" . }},app.kubernetes.io/instance={{ .Release.Name }},app.kubernetes.io/component=web" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. Database Migration Status:
{{- if .Values.jobs.migrate.enabled }}
  Check the migration job status:
  kubectl get jobs -n {{ .Release.Namespace }} {{ include "canine.fullname" . }}-migrate-{{ .Release.Revision }}
{{- else }}
  Database migrations are disabled. Run them manually:
  kubectl exec -it deployment/{{ include "canine.fullname" . }} -- bundle exec rails db:migrate
{{- end }}

3. Background Workers:
{{- if .Values.sidekiq.enabled }}
  Sidekiq workers are running. Check their status:
  kubectl get pods -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "canine.name" . }},app.kubernetes.io/component=worker"
{{- else }}
  Sidekiq workers are disabled. Background jobs will not be processed.
{{- end }}

4. Important Configuration:
  - Ensure you have set the following required values:
    - rails.secretKeyBase
    - rails.masterKey
    - postgresql.auth.password (if using built-in PostgreSQL)
    - redis.auth.password (if using built-in Redis)

5. Access Rails Console:
  kubectl exec -it deployment/{{ include "canine.fullname" . }} -- bundle exec rails console

6. View Logs:
  # Rails application logs
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "canine.name" . }},app.kubernetes.io/component=web" -f
  
  # Sidekiq logs
  kubectl logs -n {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "canine.name" . }},app.kubernetes.io/component=worker" -f